// Generated by CoffeeScript 1.6.3
/*
  Author: Jinhyuk Lee
*/


(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (String.prototype.format === void 0) {
    String.prototype.format = function() {
      var _arguments;
      _arguments = arguments;
      return this.replace(/{(\d+)}/g, function(match, number) {
        if (typeof _arguments[number] !== 'undefined') {
          return _arguments[number];
        } else {
          return match;
        }
      });
    };
  }

  String.prototype.endsWith = function(suffix) {
    return this.substr(this.length - suffix.length) === suffix;
  };

  String.prototype.startsWith = function(prefix) {
    return this.substr(0, prefix.length) === prefix;
  };

  jQuery(function() {
    var $body, $meta, content, event, pagesViewModel;
    $('input, textarea').placeholder();
    $.extend({
      getParameters: function() {
        var hash, kv, vars, _i, _len, _ref;
        vars = [];
        if (window.location.hash.indexOf('?') === -1) {
          return [];
        }
        _ref = window.location.hash.slice(window.location.hash.indexOf('?') + 1).split('&');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hash = _ref[_i];
          if (hash.length === 0) {
            continue;
          }
          kv = hash.split('=');
          vars.push(kv[0]);
          vars[kv[0]] = kv[1];
        }
        return vars;
      },
      getParameter: function(name) {
        var temp;
        temp = $.getParameters()[name];
        if (temp === void 0) {
          return "";
        } else {
          return temp;
        }
      },
      getParameterHash: function() {
        if (window.location.hash.indexOf('?') === -1) {
          return "";
        } else {
          return window.location.hash.slice(window.location.hash.indexOf('?'));
        }
      },
      setParameter: function(key, value) {
        var p, params, temp, _i, _len;
        if ($.getParameter(key) === void 0) {
          if (window.location.hash.indexOf('?') === -1) {
            window.location.hash += "?";
          }
          window.location.hash += key + '=' + value + '&';
        } else {
          params = $.getParameters;
          temp = "?";
          for (_i = 0, _len = params.length; _i < _len; _i++) {
            p = params[_i];
            temp += p + '=' + params[p] + '&';
          }
          temp += key + '=' + value + '&';
          window.location.hash = window.location.hash.slice(0, window.location.hash.indexOf('?')) + temp;
        }
        return $('#submenu li.active').data('parameter', $.getParameterHash());
      }
    });
    $body = $('body');
    event = {
      afterLoad: function() {
        var html, logo, support;
        logo = $('#animation-mask #logo');
        html = $('html');
        support = html.is('.csstransitions') && html.is('.opacity');
        if (_.doneLoading === true) {
          if (_.waitForLoading === true) {
            if (logo.is(':hidden')) {
              logo.fadeIn(1000, 'easeInQuint', function(e) {
                return event.afterLoad();
              });
            } else {
              setTimeout(event.afterLoad, 500);
            }
          } else {
            logo.hide();
            if (support) {
              $('#single-page div.modal').css({
                marginTop: '15.5px',
                opacity: 1.0
              });
              $('#animation-mask').hide();
              $('footer').parent().show();
            } else {
              $('#single-page div.modal').animate({
                marginTop: '15.5px'
              }, 1000, 'easeOutQuint');
              $('#animation-mask').fadeOut({
                duration: 1000,
                easing: 'easeInQuint'
              });
            }
          }
        } else {
          if (logo.is(':hidden')) {
            logo.fadeIn(1000, 'easeInQuint', function(e) {
              return event.afterLoad();
            });
          } else {
            setTimeout(event.afterLoad, 500);
          }
        }
        return true;
      }
    };
    if (_.waitForLoading === void 0) {
      _.waitForLoading = false;
    }
    if (_.doneLoading === void 0) {
      _.doneLoading = false;
    }
    _.loadingInterval = 60 * 3;
    $meta = $('meta[name=animation]');
    if ($meta.length > 0 && $meta !== void 0) {
      content = $meta[0].getAttribute('content');
      if (content === "fadein") {
        $('#single-page').show();
        $(window).load(function(e) {
          _.doneLoading = true;
          return event.afterLoad();
        });
      }
    }
    pagesViewModel = function() {
      var parts, self;
      self = this;
      self.menu = ko.observable();
      self.content = ko.observable();
      self._page = '';
      self.page = ko.computed({
        read: function() {
          return self._page;
        },
        write: function(value) {
          if (self._page !== value) {
            self._page = value;
            History.pushState({}, _('title.' + self.menu() + '.' + self._page), '/' + _.url + '/' + self.menu() + '/' + self._page);
          }
          return true;
        },
        owner: self
      });
      self.username = '';
      self.email = '';
      self.password = '';
      self.signinButton = ko.observable(_('signin'));
      self.signin = function(elem) {
        self.signinButton(_('signin.progress'));
        _.Users.signin().ajax({
          data: {
            email: self.email,
            password: self.password
          },
          success: function(d, s, x) {
            if (x.status === 202) {
              return location.href = _.Pages.account(d).url;
            } else {
              Messenger().post({
                message: _(d),
                type: 'error',
                showCloseButton: true
              });
              return self.signinButton(_('signin'));
            }
          },
          error: function(x, s, r) {
            Messenger().post({
              message: _(r),
              type: 'error',
              showCloseButton: true
            });
            return self.signinButton(_('signin'));
          }
        });
        return false;
      };
      parts = location.pathname.split('/');
      if (parts.length > 2) {
        self.menu(parts[2]);
      }
      if (parts.length > 3) {
        self.page(parts[3]);
      }
      History.Adapter.bind(window, 'statechange', function() {
        var _ref;
        if (_ref = self.page(), __indexOf.call(_.Pages, _ref) >= 0) {
          console.log(self.menu() + '_' + self.page());
          _.Pages[self.menu() + '_' + self.page()](_.url).ajax({
            success: function(d, s, x) {
              if (x.status !== 200) {
                Messenger().post({
                  message: _(d),
                  type: 'error',
                  showCloseButton: true
                });
                return console.log('Go Back');
              } else {
                return self.content(d);
              }
            }
          });
        } else {
          Messenger().post({
            message: _('page.empty'),
            type: 'error',
            showCloseButton: true
          });
        }
        return true;
      });
      return true;
    };
    ko.applyBindings(new pagesViewModel());
    return true;
  });

}).call(this);
