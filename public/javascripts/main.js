// Generated by CoffeeScript 1.6.3
/*
Jinhyuk Lee at mintpresso.com
*/


(function() {
  if (String.prototype.format === void 0) {
    String.prototype.format = function() {
      var _arguments;
      _arguments = arguments;
      return this.replace(/{(\d+)}/g, function(match, number) {
        if (typeof _arguments[number] !== 'undefined') {
          return _arguments[number];
        } else {
          return match;
        }
      });
    };
  }

  String.prototype.endsWith = function(suffix) {
    return this.substr(this.length - suffix.length) === suffix;
  };

  String.prototype.startsWith = function(prefix) {
    return this.substr(0, prefix.length) === prefix;
  };

  jQuery(function() {
    var $body, $meta, content, event, pagesViewModel;
    $('input, textarea').placeholder();
    $body = $('body');
    event = {
      afterLoad: function() {
        var html, logo, support;
        logo = $('#animation-mask #logo');
        html = $('html');
        support = html.is('.csstransitions') && html.is('.opacity');
        if (_.doneLoading === true) {
          if (_.waitForLoading === true) {
            if (logo.is(':hidden')) {
              logo.fadeIn(1000, 'easeInQuint', function(e) {
                return event.afterLoad();
              });
            } else {
              setTimeout(event.afterLoad, 500);
            }
          } else {
            logo.hide();
            if (support) {
              $('#single-page div.modal').css({
                marginTop: '15.5px',
                opacity: 1.0
              });
              $('#animation-mask').hide();
              $('footer').parent().show();
            } else {
              $('#single-page div.modal').animate({
                marginTop: '15.5px'
              }, 1000, 'easeOutQuint');
              $('#animation-mask').fadeOut({
                duration: 1000,
                easing: 'easeInQuint'
              });
            }
          }
        } else {
          if (logo.is(':hidden')) {
            logo.fadeIn(1000, 'easeInQuint', function(e) {
              return event.afterLoad();
            });
          } else {
            setTimeout(event.afterLoad, 500);
          }
        }
        return true;
      }
    };
    if (_.waitForLoading === void 0) {
      _.waitForLoading = false;
    }
    if (_.doneLoading === void 0) {
      _.doneLoading = false;
    }
    _.loadingInterval = 60 * 3;
    $meta = $('meta[name=animation]');
    if ($meta.length > 0 && $meta !== void 0) {
      content = $meta[0].getAttribute('content');
      if (content === "fadein") {
        $('#single-page').show();
        $(window).load(function(e) {
          _.doneLoading = true;
          return event.afterLoad();
        });
      }
    }
    pagesViewModel = function() {
      var self;
      self = this;
      self.data = {
        usage: ko.observable(),
        plansAndBilling: ko.observable(),
        apiKey: ko.observable()
      };
      self.menu = ko.observable();
      self._page = ko.observable();
      self.page = ko.computed({
        read: function() {
          return this._page();
        },
        write: function(value) {
          if (self._page() !== value) {
            self._page(value);
            if (value.length > 0) {
              History.pushState({
                timestamp: moment().seconds()
              }, _('title.' + self.menu() + '.' + self._page()), '/' + _.url + '/' + self.menu() + '/' + self._page());
            }
          }
          return true;
        },
        owner: self
      });
      self.username = '';
      self.email = '';
      self.password = '';
      self.signinButton = ko.observable(_('signin'));
      self.signin = function(elem) {
        self.signinButton(_('signin.progress'));
        _.Users.signin().ajax({
          data: {
            email: self.email,
            password: self.password
          },
          success: function(d, s, x) {
            if (x.status === 202) {
              return location.href = _.Pages.account(d, "").url;
            } else {
              Messenger().post({
                message: _(d),
                type: 'error',
                showCloseButton: true
              });
              return self.signinButton(_('signin'));
            }
          },
          error: function(x, s, r) {
            Messenger().post({
              message: _(r),
              type: 'error',
              showCloseButton: true
            });
            return self.signinButton(_('signin'));
          }
        });
        return false;
      };
      self.applyUrl = function() {
        var parts;
        parts = location.pathname.split('/');
        if (parts.length > 2) {
          self.menu(parts[2]);
        }
        if (parts.length > 3) {
          return self.page(parts[3]);
        } else {
          self._page('');
          return false;
        }
      };
      self.applyUrl();
      History.Adapter.bind(window, 'statechange', function(e) {
        var route, state;
        state = History.getState();
        if (state.data.timestamp !== moment().seconds()) {
          if (self.applyUrl() === false) {
            return false;
          }
        }
        route = $.camelCase(self.menu() + '-' + self.page());
        if (route in _.Pages) {
          _.Pages[route](_.url).ajax({
            success: function(d, s, x) {
              if (x.status !== 200) {
                return Messenger().post({
                  message: _(d),
                  type: 'error',
                  showCloseButton: true
                });
              } else {
                return self.data[$.camelCase(self.page())](d);
              }
            },
            error: function(x, s, r) {
              var msg;
              return msg = Messenger().post({
                message: r,
                type: 'error',
                showCloseButton: true,
                actions: {
                  retry: {
                    label: 'Retry Now',
                    action: function() {
                      return location.reload();
                    }
                  }
                }
              });
            }
          });
        } else {
          Messenger().post({
            message: _('page.empty'),
            type: 'error',
            showCloseButton: true
          });
        }
        return true;
      });
      $(window).trigger('statechange');
      return true;
    };
    ko.applyBindings(new pagesViewModel());
    return true;
  });

}).call(this);
