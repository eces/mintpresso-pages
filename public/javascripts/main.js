// Generated by CoffeeScript 1.6.3
/*
Jinhyuk Lee at mintpresso.com
*/


(function() {
  if (String.prototype.format === void 0) {
    String.prototype.format = function() {
      var _arguments;
      _arguments = arguments;
      return this.replace(/{(\d+)}/g, function(match, number) {
        if (typeof _arguments[number] !== 'undefined') {
          return _arguments[number];
        } else {
          return match;
        }
      });
    };
  }

  String.prototype.endsWith = function(suffix) {
    return this.substr(this.length - suffix.length) === suffix;
  };

  String.prototype.startsWith = function(prefix) {
    return this.substr(0, prefix.length) === prefix;
  };

  jQuery(function() {
    var $body, $meta, content, event, pagesViewModel;
    $('input, textarea').placeholder();
    $body = $('body');
    event = {
      afterLoad: function() {
        var html, logo, support;
        logo = $('#animation-mask #logo');
        html = $('html');
        support = html.is('.csstransitions') && html.is('.opacity');
        if (_.doneLoading === true) {
          if (_.waitForLoading === true) {
            if (logo.is(':hidden')) {
              logo.fadeIn(1000, 'easeInQuint', function(e) {
                return event.afterLoad();
              });
            } else {
              setTimeout(event.afterLoad, 500);
            }
          } else {
            logo.hide();
            if (support) {
              $('#single-page div.modal').css({
                marginTop: '15.5px',
                opacity: 1.0
              });
              $('#animation-mask').hide();
              $('footer').parent().show();
            } else {
              $('#single-page div.modal').animate({
                marginTop: '15.5px'
              }, 1000, 'easeOutQuint');
              $('#animation-mask').fadeOut({
                duration: 1000,
                easing: 'easeInQuint'
              });
            }
          }
        } else {
          if (logo.is(':hidden')) {
            logo.fadeIn(1000, 'easeInQuint', function(e) {
              return event.afterLoad();
            });
          } else {
            setTimeout(event.afterLoad, 500);
          }
        }
        return true;
      }
    };
    if (_.waitForLoading === void 0) {
      _.waitForLoading = false;
    }
    if (_.doneLoading === void 0) {
      _.doneLoading = false;
    }
    _.loadingInterval = 60 * 3;
    $meta = $('meta[name=animation]');
    if ($meta.length > 0 && $meta !== void 0) {
      content = $meta[0].getAttribute('content');
      if (content === "fadein") {
        $('#single-page').show();
        $(window).load(function(e) {
          _.doneLoading = true;
          return event.afterLoad();
        });
      }
    }
    pagesViewModel = function() {
      var self;
      self = this;
      self.menu = ko.observable();
      self._page = ko.observable();
      self.page = ko.computed({
        read: function() {
          return this._page();
        },
        write: function(value) {
          if (self._page() !== value) {
            self._page(value);
            if (value.length > 0) {
              History.pushState({
                timestamp: moment().seconds()
              }, _('title.' + self.menu() + '.' + $.camelCase(self._page())), '/' + _.url + '/' + self.menu() + '/' + self._page());
            }
          }
          return true;
        },
        owner: self
      });
      self.username = '';
      self.email = '';
      self.password = '';
      self.signinButton = ko.observable(_('signin'));
      self.applyButton = ko.observable(_('apply.change'));
      self.findPassword = function() {
        if (self.email.length) {
          location.href = _.Users.findPassword(self.email).url;
        } else {
          Messenger().post({
            message: _('form.empty.email'),
            type: 'info'
          });
        }
        return false;
      };
      self.signin = function(elem) {
        self.signinButton(_('signin.progress'));
        _.Users.signin().ajax({
          data: {
            email: self.email,
            password: self.password
          },
          success: function(d, s, x) {
            if (x.status === 202) {
              return location.href = _.Pages.account(d, "").url;
            } else if (x.status === 201) {
              Messenger().post({
                message: _(d),
                type: 'info',
                showCloseButton: true
              });
              return self.signinButton(_('signin'));
            } else {
              Messenger().post({
                message: _(d),
                type: 'error',
                showCloseButton: true
              });
              return self.signinButton(_('signin'));
            }
          },
          error: function(x, s, r) {
            Messenger().post({
              message: _(r),
              type: 'error',
              showCloseButton: true
            });
            return self.signinButton(_('signin'));
          }
        });
        return false;
      };
      self.search = {
        data: ko.observable(),
        dataType: ko.observable(''),
        responseTime: ko.observable('0'),
        itemString: ko.observable('0 item'),
        apikey: ko.observable(''),
        queries: ko.observable(''),
        secretKey: '',
        template: function() {
          if (self.search.dataType() === 'model') {
            return 'model-template';
          } else if (self.search.dataType() === 'status') {
            return 'status-template';
          } else {
            return '';
          }
        },
        refresh: function() {
          return self.search.query(self.search.queries());
        },
        revert: function() {
          self.search.queries('');
          return self.search.data.removeAll();
        },
        afterRender: function() {
          self.search.secretKey = $('#secretKey').html();
          if (self.search.secretKey.length === 0) {
            Messenger().post({
              message: _('secret.key.empty', {
                type: 'error'
              })
            });
          }
          $('input[name=q]').focus();
          self.prepareComponents();
          return Prism.highlightElement($('#search table pre'), true);
        }
      };
      self.search.query = function() {
        var e, json, parts, temp, url;
        parts = [];
        if (self.search.queries().length) {
          parts = self.search.queries().split(' ');
        }
        switch (parts.length) {
          case 0:
            Messenger().post({
              message: _('query.empty', {
                type: 'error',
                showCloseButton: true
              })
            });
            break;
          case 1:
            self.search.queries(parts[0] + ' {}');
            self.search.query();
            break;
          case 2:
            if (Number(parts[0]).toString() !== 'NaN') {
              Messenger().post({
                message: _('query.sType.invalid', {
                  type: 'error'
                })
              });
              return false;
            }
            json = null;
            try {
              temp = JSON.parse(parts[1]);
              if (toString.call(json) === '[object Object]') {
                json = temp;
              }
            } catch (_error) {
              e = _error;
            }
            _.responseTime = Date.now();
            self.search.data([]);
            self.search.dataType('model');
            if (json === null) {
              url = _.server + ("/" + parts[0] + "/" + parts[1] + "?apikey=" + self.search.secretKey);
            } else {
              url = _.server + ("/" + parts[0] + "?apikey=" + self.search.secretKey + "&json=" + (encodeURIComponent(JSON.stringify(json))));
            }
            $.ajax({
              url: url,
              type: 'GET',
              async: true,
              cache: false,
              crossDomain: true,
              dataType: 'jsonp',
              jsonpCallback: '_' + Date.now(),
              success: function(d, s, x) {
                var t;
                self.search.responseTime(Date.now() - _.responseTime);
                if (x.status === 200 && d.status !== 404) {
                  self.search.itemString('1 item');
                  t = Object.keys(d)[0];
                  d[t].$type = t;
                  return self.search.data([d[t]]);
                } else {
                  if (d.status !== void 0) {
                    return self.search.itemString("(" + (_('response.' + d.status)) + ") - 0 item");
                  } else {
                    return self.search.itemString("(" + (_('response.' + x.status)) + ") - 0 item");
                  }
                }
              },
              error: function(x, s, r) {
                self.search.responseTime(Date.now() - _.responseTime);
                return self.search.itemString("(" + (_('response.' + x.status)) + ") - 0 item");
              },
              complete: function() {
                return $('input[name=q]').focus();
              }
            });
            break;
          case 3:
            if (!isNaN(Number(parts[0]))) {
              Messenger().post({
                message: _('query.sType.invalid', {
                  type: 'error'
                })
              });
              return false;
            }
            if (!isNaN(Number(parts[1]))) {
              Messenger().post({
                message: _('query.v.invalid', {
                  type: 'error'
                })
              });
              return false;
            }
            if (!isNaN(Number(parts[2]))) {
              Messenger().post({
                message: _('query.oType.invalid', {
                  type: 'error'
                })
              });
              return false;
            }
            _.responseTime = Date.now();
            self.search.data([]);
            self.search.dataType('status');
            url = _.server + ("/" + parts[0] + "/" + parts[1] + "/" + parts[2] + "?apikey=" + self.search.secretKey);
            $.ajax({
              url: url,
              type: 'GET',
              async: true,
              cache: false,
              crossDomain: true,
              dataType: 'jsonp',
              jsonpCallback: '_' + Date.now(),
              success: function(d, s, x) {
                var key, len;
                self.search.responseTime(Date.now() - _.responseTime);
                if (x.status === 200) {
                  len = d.length;
                  if (len > 1) {
                    self.search.itemString("" + len + " items");
                  } else {
                    self.search.itemString("" + len + " item");
                  }
                  for (key in d) {
                    d[key].$subject.$type = parts[0];
                    d[key].$subject.$expanded = ko.observable(false);
                    d[key].$object.$type = parts[2];
                    d[key].$object.$expanded = ko.observable(false);
                  }
                  return self.search.data(d);
                } else {
                  if (d.status !== void 0) {
                    return self.search.itemString("(" + (_('response.' + d.status)) + ") - 0 item");
                  } else {
                    return self.search.itemString("(" + (_('response.' + x.status)) + ") - 0 item");
                  }
                }
              },
              error: function(x, s, r) {
                self.search.responseTime(Date.now() - _.responseTime);
                return self.search.itemString("(" + (_('response.' + x.status)) + ") - 0 item");
              },
              complete: function() {
                return $('input[name=q]').focus();
              }
            });
            break;
          case 4:
            Messenger().post({
              message: _('query.invalid.short', {
                type: 'error'
              })
            });
            break;
          case 5:
            if (!isNaN(Number(parts[0]))) {
              Messenger().post({
                message: _('query.sType.invalid', {
                  type: 'error'
                })
              });
              return false;
            }
            if (!isNaN(Number(parts[2]))) {
              Messenger().post({
                message: _('query.v.invalid', {
                  type: 'error'
                })
              });
              return false;
            }
            if (!isNaN(Number(parts[3]))) {
              Messenger().post({
                message: _('query.oType.invalid', {
                  type: 'error'
                })
              });
              return false;
            }
            _.responseTime = Date.now();
            self.search.data([]);
            self.search.dataType('status');
            url = _.server + ("/" + parts[0] + "/" + parts[1] + "/" + parts[2] + "/" + parts[3] + "/" + parts[4] + "?apikey=" + self.search.secretKey);
            $.ajax({
              url: url,
              type: 'GET',
              async: true,
              cache: false,
              crossDomain: true,
              dataType: 'jsonp',
              jsonpCallback: '_' + Date.now(),
              success: function(d, s, x) {
                var key, len;
                self.search.responseTime(Date.now() - _.responseTime);
                if (x.status === 200) {
                  len = d.length;
                  if (len > 1) {
                    self.search.itemString("" + len + " items");
                  } else {
                    self.search.itemString("" + len + " item");
                  }
                  for (key in d) {
                    d[key].$subject.$type = parts[0];
                    d[key].$object.$type = parts[2];
                  }
                  return self.search.data(d);
                } else {
                  if (d.status !== void 0) {
                    return self.search.itemString("(" + (_('response.' + d.status)) + ") - 0 item");
                  } else {
                    return self.search.itemString("(" + (_('response.' + x.status)) + ") - 0 item");
                  }
                }
              },
              error: function(x, s, r) {
                self.search.responseTime(Date.now() - _.responseTime);
                return self.search.itemString("(" + (_('response.' + x.status)) + ") - 0 item");
              },
              complete: function() {
                return $('input[name=q]').focus();
              }
            });
            break;
          default:
            Messenger().post({
              message: _('query.invalid.long', {
                type: 'error'
              })
            });
        }
        return false;
      };
      self.apiKey = {
        data: ko.observableArray(),
        create: function() {
          return self.apiKey.data.unshift({
            $id: ko.observable(''),
            $no: ko.observable(0),
            label: ko.observable('test'),
            $createdAt: 0,
            $updatedAt: 0,
            url: ko.observableArray([
              {
                value: ko.observable('*')
              }
            ]),
            logThreshold: ko.observable('warn'),
            scope: ko.observableArray([
              {
                name: "read_model",
                value: true
              }, {
                name: "create_model",
                value: true
              }, {
                name: "update_model",
                value: true
              }, {
                name: "search_status",
                value: true
              }, {
                name: "create_status",
                value: true
              }, {
                name: "delete_status",
                value: false
              }, {
                name: "manage_order",
                value: false
              }, {
                name: "manage_pickup",
                value: false
              }
            ])
          });
        },
        addUrl: function(key) {
          return key.url.push({
            value: ''
          });
        },
        removeUrl: function() {
          var key, value;
          key = arguments[0];
          value = arguments[1];
          return key.url.remove(value);
        },
        save: function(key) {
          _.Pages.accountApiKeyUpdate(_.url).ajax({
            contentType: 'application/json',
            data: ko.toJSON(key),
            success: function(d, s, x) {
              if (x.status !== 201) {
                return Messenger().post({
                  message: _(d),
                  type: 'error',
                  showCloseButton: true
                });
              } else {
                return Messenger().post({
                  message: _(d),
                  type: 'success',
                  showCloseButton: true,
                  actions: {
                    reload: {
                      label: 'Refresh now',
                      action: function() {
                        return location.reload();
                      }
                    }
                  }
                });
              }
            },
            error: function(x, s, r) {
              var msg;
              return msg = Messenger().post({
                message: r,
                type: 'error',
                showCloseButton: true,
                actions: {
                  retry: {
                    label: 'Retry Now',
                    action: function() {
                      return self.apiKey.save(key);
                    }
                  }
                }
              });
            }
          });
          return false;
        },
        "delete": function(key) {
          if (confirm(_('confirm.delete')) === false) {
            return false;
          }
          if (key.$no() > 0) {
            return _.Pages.accountApiKeyDelete(_.url, key.$no()).ajax({
              success: function(d, s, x) {
                if (x.status !== 201) {
                  return Messenger().post({
                    message: _(d),
                    type: 'error',
                    showCloseButton: true
                  });
                } else {
                  self.apiKey.data.remove(key);
                  return Messenger().post({
                    message: _(d),
                    type: 'success',
                    showCloseButton: true,
                    actions: {
                      reload: {
                        label: 'Refresh now',
                        action: function() {
                          location.hash = _.currentSave;
                          return location.reload();
                        }
                      }
                    }
                  });
                }
              },
              error: function(x, s, r) {
                var msg;
                return msg = Messenger().post({
                  message: r,
                  type: 'error',
                  showCloseButton: true,
                  actions: {
                    retry: {
                      label: 'Retry Now',
                      action: function() {
                        return self.apiKey["delete"](key);
                      }
                    }
                  }
                });
              }
            });
          } else {
            return Messenger().post({
              message: _('delete.fail'),
              type: 'error',
              showCloseButton: true
            });
          }
        },
        load: function(data) {
          return ko.mapping.fromJS(data, {}, self.apiKey.data);
        }
      };
      self.usage = {
        data: ko.observable()
      };
      self.plansAndBilling = {
        data: ko.observable()
      };
      self.prepareComponents = function() {
        $('time').each(function(k, v) {
          var $this, m;
          $this = $(v);
          if ($this.is('[ago]')) {
            m = moment(Number($this.html()));
            $this.html(m.fromNow());
            $this.attr('datetime', m.format());
            $this.attr('title', m.format());
            return $this.tooltip({
              placement: 'bottom'
            });
          } else {
            m = moment(Number($this.html()));
            return $this.html(m.format());
          }
        });
        return $('input[type=file]').bootstrapFileInput();
      };
      self.applyUrl = function() {
        var parts;
        parts = location.pathname.split('/');
        if (parts.length > 2) {
          self.menu(parts[2]);
        }
        if (parts.length > 3) {
          return self.page(parts[3]);
        } else {
          self._page('');
          return false;
        }
      };
      self.applyUrl();
      self.showMessage = function() {
        var _ref, _ref1;
        if ((_ref = _.error) != null ? _ref.length : void 0) {
          Messenger().post({
            message: _(_.error),
            type: 'error',
            showCloseButton: true
          });
        }
        if ((_ref1 = _.success) != null ? _ref1.length : void 0) {
          return Messenger().post({
            message: _(_.success),
            type: 'success'
          });
        }
      };
      History.Adapter.bind(window, 'statechange', function(e) {
        var route, state;
        state = History.getState();
        if (state.data.timestamp !== moment().seconds()) {
          if (self.applyUrl() === false) {
            return false;
          }
        }
        route = $.camelCase(self.menu() + '-' + self.page());
        if (route in _.Pages) {
          _.Pages[route](_.url).ajax({
            success: function(d, s, x) {
              if (x.status !== 200) {
                return Messenger().post({
                  message: _(d),
                  type: 'error',
                  showCloseButton: true
                });
              } else {
                switch (self.page()) {
                  case 'api-key':
                    return self.apiKey.load(d);
                  case 'import':
                    return self.showMessage();
                  case 'export':
                    break;
                  default:
                    return self[$.camelCase(self.page())].data(d);
                }
              }
            },
            error: function(x, s, r) {
              var msg;
              return msg = Messenger().post({
                message: r,
                type: 'error',
                showCloseButton: true,
                actions: {
                  retry: {
                    label: 'Retry Now',
                    action: function() {
                      return location.reload();
                    }
                  }
                }
              });
            }
          });
        } else {
          Messenger().post({
            message: _('page.empty'),
            type: 'error',
            showCloseButton: true
          });
        }
        return true;
      });
      $(window).trigger('statechange');
      return true;
    };
    ko.applyBindings(new pagesViewModel());
    return true;
  });

}).call(this);
