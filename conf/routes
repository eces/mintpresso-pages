GET     /                           controllers.Application.index
GET     /features                   controllers.Application.features
GET     /pricing                    controllers.Application.plans

GET     /terms                      controllers.Application.terms
GET     /privacy                    controllers.Application.privacy
GET     /security                   controllers.Application.security
GET     /status                     controllers.Application.status
GET     /about                      controllers.Application.about
GET     /faq                        controllers.Application.faq
GET     /documentation              controllers.Application.documentation

GET     /signin                     controllers.Application.signin
POST    /signin                     controllers.Users.signin
GET     /signout                    controllers.Users.signout
GET     /signup                     controllers.Application.signup
POST    /signup                     controllers.Users.signup
GET     /user/find                  controllers.Users.findPassword(email: Option[String])
GET     /user/password              controllers.Application.changePassword(code: Option[String])
POST    /user/password              controllers.Users.changePassword

GET     /jsValues                   controllers.Application.javascriptValues
GET     /jsRoutes                   controllers.Application.javascriptRoutes
GET     /jsMessages                 controllers.Application.javascriptMessages

GET     /assets/*file               controllers.Assets.at(path="/public", file)

GET     /:url/account/usage.json    controllers.Pages.accountUsage(url: String)
GET     /:url/account/api-key.json  controllers.Pages.accountApiKey(url: String)
POST    /:url/account/api-key       controllers.Pages.accountApiKeyUpdate(url: String)
DELETE  /:url/account/api-key       controllers.Pages.accountApiKeyDelete(url: String, no: Long)
GET     /:url/account/plans-and-billing.json controllers.Pages.accountPlansAndBilling(url: String)
GET     /:url/account/developer-console.json  controllers.Pages.accountDeveloperConsole(url: String)
GET     /:url/account               controllers.Pages.account(url: String, path="")
GET     /:url/account*path          controllers.Pages.account(url: String, path: String)

GET     /:url/collect               controllers.Pages.collect(url: String, path="")
GET     /:url/collect*path          controllers.Pages.collect(url: String, path: String)
GET     /:url/collect/search          controllers.Pages.collectSearch(url: String, path="")
GET     /:url/collect/search*path     controllers.Pages.collectSearch(url: String, path: String)
GET     /:url/collect/import          controllers.Pages.collectImport(url: String)
POST    /:url/collect/import          controllers.Pages.collectImportUpload(url: String)
GET     /:url/collect/export          controllers.Pages.collectExport(url: String)

GET     /:url/order/status.json     controllers.Pages.orderStatus(url: String)
GET     /:url/order/add.json        controllers.Pages.orderAdd(url: String)
GET     /:url/order/type.json       controllers.Pages.orderAddType(url: String)
GET     /:url/order/verb.json       controllers.Pages.orderAddVerb(url: String)
POST    /:url/order/update          controllers.Pages.orderAddUpdate(url: String)
PUT     /:url/order/start/:no       controllers.Pages.orderStatusStart(url: String, no: Long)
PUT     /:url/order/pause/:no       controllers.Pages.orderStatusPause(url: String, no: Long)
DELETE  /:url/order/:no             controllers.Pages.orderDelete(url: String, no: Long)
GET     /:url/order                 controllers.Pages.order(url: String, path="")
GET     /:url/order*path            controllers.Pages.order(url: String, path: String)

GET     /:url/pickup/list.json      controllers.Pages.pickupList(url: String)
GET     /:url/pickup/add.json       controllers.Pages.pickupAdd(url: String)
POST    /:url/pickup/update         controllers.Pages.pickupAddUpdate(url: String)
PUT     /:url/pickup/start/:no      controllers.Pages.pickupListStart(url: String, no: Long)
PUT     /:url/pickup/pause/:no      controllers.Pages.pickupListPause(url: String, no: Long)
DELETE  /:url/pickup/:no            controllers.Pages.pickupDelete(url: String, no: Long)
GET     /:url/pickup                controllers.Pages.pickup(url: String, path="")
GET     /:url/pickup*path           controllers.Pages.pickup(url: String, path: String)


GET     /:url/support               controllers.Pages.support(url: String, path="")
GET     /:url/support*path          controllers.Pages.support(url: String, path: String)
